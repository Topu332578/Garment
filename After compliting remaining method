package oop.lab.task.pkg3;

// Importing list and array list
import java.util.List;
import java.util.ArrayList;
import java.util.Date;

class Garment {

    public String id;
    public String name;
    public String description;
    public String size;
    public String color;
    public double price;
    public int stockQuantity;

    // Constructor for Garment class
    public Garment(String id, String name, String description, String size, String color, double price, int stockQuantity) {
        this.id = id;
        this.name = name;
        this.description = description;
        this.size = size;
        this.color = color;
        this.price = price;
        this.stockQuantity = stockQuantity;
    }

    void updateStock(int quantity) {
        this.stockQuantity = quantity;
    }

    double calculateDiscountPrice(double discountPercentage) {
        double discount = price * (discountPercentage / 100);
        return price - discount;
    }
}

class Fabric {

    public String id;
    public String type;
    public String color;
    public double pricePerMeter;

    // Constructor for Fabric class
    public Fabric(String id, String type, String color, double pricePerMeter) {
        this.id = id;
        this.type = type;
        this.color = color;
        this.pricePerMeter = pricePerMeter;
    }

    double calculateCost(double meters) {
        return pricePerMeter * meters;
    }
}

class Supplier {

    public String id;
    public String name;
    public String contactInfo;
    List<Fabric> suppliedFabric = new ArrayList<>();

    // Constructor for Supplier class
    public Supplier(String id, String name, String contactInfo) {
        this.id = id;
        this.name = name;
        this.contactInfo = contactInfo;
    }

    void addFabric(Fabric fabric) {
        suppliedFabric.add(fabric);
    }

    List<Fabric> getSuppliedFabrics() {
        return suppliedFabric;
    }
}

class Order {

    public String orderId;
    public Date orderDate;
    public List<Garment> garments = new ArrayList<>();
    private double totalAmount;

    // Constructor for Order class
    public Order(String orderId, Date orderDate) {
        this.orderId = orderId;
        this.orderDate = orderDate;
    }

    void addGarment(Garment garment) {
        garments.add(garment);
    }

    double calculateTotalAmount() {
        totalAmount = 0; // Reset before recalculating
        for (Garment g : garments) {
            totalAmount += g.price;
        }
        return totalAmount;
    }

    void printOrderDetails() {
        System.out.println("--------------------------");
        System.out.println("Order Details");
        System.out.println("--------------------------");
        for (Garment g : garments) {
            System.out.println("Name: " + g.name);
            System.out.println("Price: " + g.price);
            System.out.println("Description: " + g.description);
            System.out.println("--------------------------");
        }
    }
}

class Customer {

    public String customerId;
    public String name;
    public String email;
    public String phone;

    // Constructor for Customer class
    public Customer(String customerId, String name, String email, String phone) {
        this.customerId = customerId;
        this.name = name;
        this.email = email;
        this.phone = phone;
    }

    void placeOrder(Order order) {
        order.printOrderDetails();
        System.out.println("Order Placed");
    }
}

class Inventory {

    List<Garment> garments = new ArrayList<>();

    void addGarment(Garment garment) {
        garments.add(garment);
    }

    void removeGarment(String id) {
        garments.removeIf(g -> g.id.equals(id));
    }

    Garment findGarment(String id) {
        for (Garment g : garments) {
            if (g.id.equals(id))
                return g;
        }
        return null;
    }
}

public class OopLabTask3 {

    public static void main(String[] args) {
        // Creating a Garment object
        Garment g1 = new Garment("G001", "Silk Dress", "Premium quality silk dress", "M", "Red", 600, 10);
        Garment g2 = new Garment("G002", "Cotton Shirt", "Casual cotton shirt", "L", "Blue", 300, 20);

        // Calculate discounted price
        double discountedPrice = g1.calculateDiscountPrice(10);
        System.out.println("Discounted Price for " + g1.name + ": " + discountedPrice);

        // Create a Fabric object
        Fabric fabric1 = new Fabric("F001", "Silk", "Red", 50);
        double fabricCost = fabric1.calculateCost(10);
        System.out.println("Cost for 10 meters of " + fabric1.type + ": " + fabricCost);

        // Create a Supplier object and add fabric
        Supplier supplier1 = new Supplier("S001", "Textile Hub", "contact@textilehub.com");
        supplier1.addFabric(fabric1);
        System.out.println("Supplier " + supplier1.name + " supplies:");
        for (Fabric f : supplier1.getSuppliedFabrics()) {
            System.out.println("- " + f.type + " (" + f.color + ")");
        }

        // Create an Inventory and manage garments
        Inventory inventory = new Inventory();
        inventory.addGarment(g1);
        inventory.addGarment(g2);

        // Find a garment by ID
        Garment foundGarment = inventory.findGarment("G001");
        if (foundGarment != null) {
            System.out.println("Garment found: " + foundGarment.name + " - Price: " + foundGarment.price);
        }

        // Remove a garment from inventory
        inventory.removeGarment("G002");
        System.out.println("Remaining garments in inventory:");
        for (Garment g : inventory.garments) {
            System.out.println("- " + g.name);
        }

        // Create an Order and add garments
        Order order1 = new Order("O001", new Date());
        order1.addGarment(g1);
        System.out.println("Total order amount: " + order1.calculateTotalAmount());

        // Print order details
        order1.printOrderDetails();

        // Create a Customer and place an order
        Customer customer1 = new Customer("C001", "John Doe", "john@example.com", "1234567890");
        customer1.placeOrder(order1);
    }
}
